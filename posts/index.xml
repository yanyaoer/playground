<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on yányào.com</title><link>http://y%C3%A1ny%C3%A0o.com/posts/</link><description>Recent content in Posts on yányào.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jun 2020 19:05:12 +0800</lastBuildDate><atom:link href="http://y%C3%A1ny%C3%A0o.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy bitwarden_rs with podman</title><link>http://y%C3%A1ny%C3%A0o.com/posts/bitwarden_rs_with_podman/</link><pubDate>Thu, 04 Jun 2020 19:05:12 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/bitwarden_rs_with_podman/</guid><description>bitwarden_rs1 是个用 rust/rocket 编写的非官方 api 实现， dotnet 版本有点儿不太适合手头的部署环境
这里用比较现代的 podman2 来运行 docker 服务
podman run -d --name bitwarden -v /bw-data/:/data/:Z -e ROCKET_PORT=8080 -p 8080:8080 bitwardenrs/server:latest podman generate systemd --name bitwarden --files mv container-bitwarden.service /etc/systemd/system/ systemctl --user enable /etc/systemd/system/container-bitwarden.service systemctl --user start container-bitwarden.service 然后用 nginx 或者 caddy 代理一下 8080 端口即可连接客户端
brew install bitwarden-cli # npm install -g @bitwarden/cli bw config server https://bw.myserver.com https://github.com/dani-garcia/bitwarden_rs/wiki/Using-Podman &amp;#x21a9;&amp;#xfe0e;
https://podman.io/getting-started/installation.html &amp;#x21a9;&amp;#xfe0e;</description></item><item><title>Minio Storage Service</title><link>http://y%C3%A1ny%C3%A0o.com/posts/minio-storage-service/</link><pubDate>Tue, 02 Jun 2020 09:47:48 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/minio-storage-service/</guid><description>min.io 来自前 glusterFS 团队的分布式存储项目， 兼容 aws s3 / google cloud storage 接口，支持多磁盘、多节点，伸缩扩容方便， golang 编写+单执行文件部署，非常适合用 k8s 编排复制来搭建私有对象存储服务
没有生产环境的使用经验，以下仅用于业余尝鲜 六一节礼物
GNU/Linux 下载安装 wget https://dl.min.io/server/minio/release/linux-amd64/minio -O /usr/local/bin/minio chmod +x /user/local/bin/minio 添加用户、组和配置文件 groupadd --system minio useradd --system --gid minio --shell /usr/sbin/nologin --comment &amp;#34;Minio file server&amp;#34; minio mkdir -p /data/minio chown -R minio:minio /data/minio # replace minio.service with your own config, eg. User,Group wget https://raw.githubusercontent.com/minio/minio-service/master/linux-systemd/minio.service -O /etc/systemd/system/minio.service 配置端口和密钥 # optional. run `uuidgen` to creates AK/SK cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; /tmp/minio MINIO_VOLUMES=&amp;#34;/data/minio/&amp;#34; MINIO_OPTS=&amp;#34;--address :9199&amp;#34; MINIO_ACCESS_KEY=`uuidgen` MINIO_SECRET_KEY=`uuidgen` EOF 启动服务 systemctl enable minio.</description></item><item><title>Pour Over Coffee Makers</title><link>http://y%C3%A1ny%C3%A0o.com/posts/pour-over-coffee-makers/</link><pubDate>Fri, 15 May 2020 15:41:01 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/pour-over-coffee-makers/</guid><description>办公室日常用品 hario v60 2人份玻璃滤杯 1 hario v60 600ml 云朵分享壶 2 comandante c40 手摇磨豆机 3 kalita 700ml 细嘴壶 4 rivers seek 随手杯 5 2020-0615 新购入 Mr.clever 聪明杯 6 2020-0622 新购入 hario drip kettle air 7， 用了两次手感偏轻水流控制得不稳 T_T 每天一早 中午 到公司开始烧水，然后吭呲吭呲摇 40g 豆子兑 600ml 左右的水
手法就比较随意了，主要参考下面两个视频，出品大概率我自己都还挺喜欢的 按比例加注水量翻倍
&amp;ldquo;4:6 method&amp;rdquo; by Tetsu Kasuya 8 &amp;ldquo;The Ultimate V60 Technique&amp;rdquo; by James Hoffmann 家庭版 baratza encore 电动磨豆器 9 kinto OCT 2人份陶瓷滤杯 10 ikea vardagen 500ml 玻璃量杯 11 muji 万古烧马克杯 12 2020-0615 新购入 hario filter-in 冷萃瓶 13 刚开始的时候装备上交了不少学费，比如：电动砍豆机、廉价手磨、aeropress， 虽然不能一概而论，实际上很大程度还是遵循一分钱一分货的原则，性能越好则价格呈指数上涨 条件允许的话尽量选择好一点的设备，毕竟也是天天要用的家伙事</description></item><item><title>Mastodon</title><link>http://y%C3%A1ny%C3%A0o.com/posts/mastodon/</link><pubDate>Fri, 15 May 2020 09:45:08 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/mastodon/</guid><description>Mastodon 长毛象1 &amp;ndash; 基于 rubyonrails/reactjs/nodejs 开发的分布式 &amp;amp; 去中心化 twiter clone。利用空闲时间在 aws lightsail 上开了个实例把服务跑了起来
一开始走了些弯路，因为选机房和省钱的缘故，重建了若干次操作系统，最后的选择是 tokyo+cloudflare，没错我又套了 cdn，实在是海外线路到北京联通不稳定
安装步骤没有使用 docker 而是参考文档从源码安装2，原因和解决方案如下：
机器用 $3.5/mo 512mem 最便宜的那档消费降级，出于 net/io 性能考虑就不使 docker 啦
内存问题，RAILS_ENV=production bundle exec rake mastodon:setup 这一步骤执行到 rails assets:precompile， 不管是在 docker 里跑还是直接运行都会报 swap 分区不足，找到两个方案来解决:
# create swapfile &amp;lt;https://linuxize.com/post/create-a-linux-swap-file/&amp;gt; $ sudo fallocate -l 2G /swapfile $ sudo chmod 600 /swapfile $ sudo mkswap /swapfile $ sudo swapon /swapfile # verify active $ sudo swapon --show # optional: low value is better for production $ sudo sysctl vm.</description></item><item><title>Gitlab Repo</title><link>http://y%C3%A1ny%C3%A0o.com/posts/gitlab-repo/</link><pubDate>Sat, 09 May 2020 19:34:06 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/gitlab-repo/</guid><description>gitlab 里面已经有十来个 group，几百个 project，虽然不一定会每个项目都参与， 但是为了快速同步代码，又捡起了 android 开发常用的 repo 命令来管理多项目代码。 这里使用了 gitlab graphql 接口来遍历项目生成分组的 manifest 文件
#!/usr/bin/env python import argparse import json import os import urllib2 GITLAB_HOST = &amp;#34;gitlab.mydomain.com&amp;#34; GITLAB_SSH_URL = &amp;#34;ssh://git@&amp;#34; + GITLAB_HOST GITLAB_GRAPHQL_URL = &amp;#34;https://&amp;#34; + GITLAB_HOST + &amp;#34;/api/graphql&amp;#34; GITLAB_TOKEN = &amp;#34;&amp;#34; GITLAB_GROUP = [&amp;#34;&amp;#34;] BLACK_LIST = (&amp;#34;&amp;#34;,) # 以上配置修改为自己的设定 template = &amp;#34;&amp;#34;&amp;#34;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!-- autogen by gen.py, do not edit this file --&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;remote name=&amp;#34;origin&amp;#34; fetch=&amp;#34;{ssh_url}&amp;#34; /&amp;gt; &amp;lt;default revision=&amp;#34;master&amp;#34; remote=&amp;#34;origin&amp;#34; sync-c=&amp;#34;true&amp;#34; sync-j=&amp;#34;4&amp;#34; /&amp;gt; {content} &amp;lt;/manifest&amp;gt;&amp;#34;&amp;#34;&amp;#34; def write_file(content, filename=&amp;#34;default.</description></item><item><title>Dash Replacement with tmux</title><link>http://y%C3%A1ny%C3%A0o.com/posts/dash-replacement/</link><pubDate>Thu, 07 May 2020 18:54:37 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/dash-replacement/</guid><description>通过 tmux 快捷集成替换 dash.app 查询开发文档
$ brew install dasht $ dasht-docsets | tr &amp;#39;A-Z&amp;#39; &amp;#39;a-z&amp;#39; go javascript python_3 rust tornado # tmux.conf quick start bind -n S-up command-prompt -p &amp;#39;docset:&amp;#39; &amp;#34;splitw -h -fb -l 80 dasht &amp;#39;%%&amp;#39;&amp;#34;</description></item><item><title>Cloudflare Gost</title><link>http://y%C3%A1ny%C3%A0o.com/posts/cloudflare-gost/</link><pubDate>Thu, 07 May 2020 16:00:01 +0800</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/cloudflare-gost/</guid><description>从清明节开始，稳定运行好几年的 ss 服务器终于阵亡了，所有端口全挂。一直蹭公司的 vpn 查资料也挺到了五一，实在拖延够够的就再另外开了一台机器中转过去迁移数据，不过嘛年纪大了又开始犯懒，企图拯救获得资格认证的机器，通过一番网上冲浪学习到了目前(实测可用)能满足我需求的方案。简单来说就是：cloudflare[后文简称为 cf] + websockets over gost，实际的客户端通过 cdn 代理再接入服务
有几个需要注意的地方：
gost 启动时绑定的 localhost 不直接对外访问，走了 caddy 的转发，而这一步和 cf 的 ssl 证书配置会造成不停的重定向跳转，需要将 cf 加密模式配置为 flexible
然后修改 caddy 的域名配置为 http://domain.com https://domain.com { &amp;hellip; } 阻止 cf 和 caddy 之间的 http -&amp;gt; https
gost 服务端监听 ws 协议，本地的 gost 客户端转发 wss 协议连接 cf_domain:443
需要鉴权的方案使用 socks5+wss://username:password@domain:port
android 客户端的设置，因为使用了 ws 协议，所以需要将域名写入到插件的配置里，直接用域名变量无法解析
具体配置参考官方文档，一切浪费的时间都是源于没认真仔细看文档</description></item><item><title>webpack resolve local module</title><link>http://y%C3%A1ny%C3%A0o.com/posts/webpack-resolve-local-module/</link><pubDate>Fri, 13 Jan 2017 23:19:49 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/webpack-resolve-local-module/</guid><description>最近的项目刚开始，设计的目录层级有点深
经常会在好几层本地路径之间互相引用
import Image from '../../../../components/image'
这层层叠叠的路径写起来实在丑陋
不由得想起 Python 从项目根目录引用模块
然后研究了一下 Node.js 里的几种简易实现
干脆利落的软连接: ln -s node_modules src
修改环境变量: NODE_PATH=. node app
从本地目录安装:
// package.json // 需要运行 npm install { &amp;#34;name&amp;#34;: &amp;#34;baz&amp;#34;, &amp;#34;dependencies&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;file: ./src&amp;#34;, } } 另外还有些修改 global，或者引入其他 require 实现的方法就不再一一列出了
最终选择的是修改 webpack 配置
// webpack.config.js resolve: { modulesDirectories: [__dirname, &amp;#39;node_modules&amp;#39;], } https://gist.github.com/branneman/8048520 http://stackoverflow.com/questions/10860244/how-to-make-the-require-in-node-js-to-be-always-relative-to-the-root-folder-of-t/41078266#41078266 https://webpack.github.io/docs/configuration.html#resolve-modulesdirectories</description></item><item><title>Leonard Cohen - you want it darker</title><link>http://y%C3%A1ny%C3%A0o.com/posts/leonard-cohen-you-want-it-darker/</link><pubDate>Tue, 25 Oct 2016 09:21:00 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/leonard-cohen-you-want-it-darker/</guid><description>年度最佳
you want it darker
循环听了好几天
干净低沉的嗓音加配乐
愈发担心以后听不到了怎么办 😢～</description></item><item><title>web audio</title><link>http://y%C3%A1ny%C3%A0o.com/posts/web-audio/</link><pubDate>Wed, 15 Jun 2016 14:34:08 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/web-audio/</guid><description>照文档撸了一下 AudioContext 可视化音频
桌面浏览器上 Safari 9, Chrome stable 绘制正常
移动端只有微信的 webview 能工作, 纯玩票叻 ref: https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no&amp;#34;&amp;gt; &amp;lt;title&amp;gt;AV&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;canvas id=&amp;#34;vis&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;audio id=&amp;#34;av&amp;#34; src=&amp;#34;YOUR_AUDIO_FILE&amp;#34;&amp;gt;&amp;lt;/audio&amp;gt; &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext; window.onload = function(){ var canvas = document.getElementById(&amp;#39;vis&amp;#39;); var canvasCtx = canvas.getContext(&amp;#39;2d&amp;#39;); var isPlaying = true; var audio = document.getElementById(&amp;#39;av&amp;#39;); var audioCtx = new AudioContext(); var analyser = audioCtx.</description></item><item><title>move to caddy</title><link>http://y%C3%A1ny%C3%A0o.com/posts/move-to-caddy/</link><pubDate>Tue, 26 Apr 2016 06:41:13 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/move-to-caddy/</guid><description>去年用 Hexo 搭建的日志已经好几个月没更新了，最近休假有点空闲就继续更新吧。
先从 Github 迁移回自己的 Linode，然后安装一个 Caddyserver1 来渲染 markdown
Caddy is a unique web server with a modern feature set. Think nginx or Apache, but written in Go. With Caddy, you can serve your websites over HTTP/2. It can act as a reverse proxy and load balancer. Front your PHP apps with it. You can even deploy your site with git push. Cool, right?2
Download and install systemd wget -O &amp;#39;caddy.</description></item><item><title>mongodb backup</title><link>http://y%C3%A1ny%C3%A0o.com/posts/mongodb-backup/</link><pubDate>Tue, 22 Dec 2015 13:30:24 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/mongodb-backup/</guid><description>有台机器准备2月份下架 记一个 mongodb 备份小脚本 :)
#!/bin/bash # vim: set et sw=2 ts=2 sts=2 ff=unix fenc=utf8: MONGO_DATABASE=&amp;#34;_name_&amp;#34; MONGO_HOST=&amp;#34;_ip_&amp;#34; MONGO_PORT=&amp;#34;_prot_&amp;#34; TIMESTAMP=`date +%Y-%m-%dT%H:%M:%S` MONGODUMP_PATH=&amp;#34;/usr/bin/mongodump&amp;#34; BACKUPS_DIR=&amp;#34;/data/dumps/&amp;#34; BACKUP_NAME=&amp;#34;$MONGO_DATABASE-$TIMESTAMP&amp;#34; while test $# -gt 0 do case &amp;#34;$1&amp;#34; in -m) echo &amp;#34;backup mongthly and clear week_dir&amp;#34; #rm $BACKUPS_DIR&amp;#34;week/*&amp;#34; find $BACKUPS_DIR&amp;#34;week&amp;#34; -type f -name &amp;#39;*.tgz&amp;#39; -delete tar -czPf $BACKUPS_DIR&amp;#34;month/&amp;#34;$BACKUP_NAME.tgz $BACKUPS_DIR$MONGO_DATABASE ;; -w) echo &amp;#34;backup weekly&amp;#34; echo &amp;#34;tar -czPf $BACKUPS_DIR&amp;#34;week/&amp;#34;$BACKUP_NAME.tgz $BACKUPS_DIR$MONGO_DATABASE&amp;#34; ;; -d) echo &amp;#34;just dump&amp;#34; $MONGODUMP_PATH -d $MONGO_DATABASE --out $BACKUPS_DIR ;; *) echo &amp;#34;do nothing&amp;#34; ;; esac shift done # crontab -e 10 3 * * * /bin/bash $HOME/bin/mongobackup.</description></item><item><title>let's encrypt</title><link>http://y%C3%A1ny%C3%A0o.com/posts/let-s-encrypt/</link><pubDate>Mon, 14 Dec 2015 23:35:49 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/let-s-encrypt/</guid><description>Let&amp;rsquo;s Encrypt 已经公开测试，不需要再提交测试域名表单，直接就能申请
小项目以后都能用这玩意开 https 不用花钱买证书哦啦啦
照 文档 做一遍给域名签上证书还挺简单的
# 获取项目代码 git clone https://github.com/letsencrypt/letsencrypt cd letsencrypt # 安装依赖 ./letsencrypt-auto # 获取证书 ./letsencrypt-auto certonly --standalone -d www.example.com -d example.com # 配置 nginx server { listen 443 ; ssl on; ssl_certificate_key /etc/letsencrypt/live/youdomain/privkey.pem; ssl_certificate /etc/letsencrypt/live/youdomain/fullchain.pem; } 需要注意的是 dnspod 等国内服务解析域名有问题
我这里直接切回 domains.google.com 就行了
使用 standalone 模式需要先停掉默认的 nginx
文档里提到可以使用 webroot 模式不用停 但我创建验证文件失败了 :(
默认90天过期，建议 crontab 定时更新
###Update
使用 acme.sh
An ACME protocol client written purely in Shell (Unix shell) language.</description></item><item><title>simple crawler</title><link>http://y%C3%A1ny%C3%A0o.com/posts/simple-nodejs-crawler/</link><pubDate>Sat, 17 Oct 2015 12:06:21 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/simple-nodejs-crawler/</guid><description>半夜看了本小说觉得翻页太累
首先要解决的问题是找一个质量还过得去的小说站 然后写个脚本去把它爬下来章节合并到一起
import fs from &amp;#34;fs&amp;#34;; import { argv } from &amp;#34;process&amp;#34;; import request from &amp;#34;request&amp;#34;; import cheerio from &amp;#34;cheerio&amp;#34;; import iconv from &amp;#34;iconv-lite&amp;#34;; import sanitize from &amp;#39;sanitize-html&amp;#39;; class main { constructor() { Object.assign(this, { path: &amp;#39;./chapter.json&amp;#39;, html: &amp;#39;./reader.html&amp;#39;, url: { list: &amp;#39;http://www.piaotian.net/html/6/6658/&amp;#39; }, store: [] }) } fetch(url, callback) { request.get(url, {encoding: null}, (error, response, body)=&amp;gt; { if (!error &amp;amp;&amp;amp; response.statusCode == 200) { let $ = cheerio.load(iconv.decode(body, &amp;#39;GBK&amp;#39;)); callback($, body); } else { console.</description></item><item><title>send notification when task finish</title><link>http://y%C3%A1ny%C3%A0o.com/posts/send-notification-after-task-end/</link><pubDate>Sun, 11 Oct 2015 00:38:23 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/send-notification-after-task-end/</guid><description>终端里运行长时间任务(比如 make systemimage)的时候经常会切换到其他环境做别的事情 容易忘记查看之前的任务是否完成, 查到一些方法用在任务结束时发出通知
#C-z 切到后台运行 fg; tput bel # Mac OS X #系统弹窗 osascript -e &amp;#39;tell app &amp;#34;System Events&amp;#34; to display alert &amp;#34;Build Completed&amp;#34; message &amp;#34;The checkout and build have completed.&amp;#34;&amp;#39; say &amp;#34;Job finished&amp;#34; #语音播报 #notification center osascript -e &amp;#39;display notification &amp;#34;Job finished&amp;#34; with title &amp;#34;Alert&amp;#34;&amp;#39; sudo gem install terminal-notifier terminal-notifier -message &amp;#34;Job finished!&amp;#34; -title &amp;#34;Alert&amp;#34; # Ubuntu notify-send &amp;#34;Job finished!&amp;#34; # KDE kdialog --passivepopup &amp;#39;Job finished&amp;#39; 还有 iterm2 trigger 也能用来触发通知, 高亮文字</description></item><item><title>create CNAME with internationalized domain name</title><link>http://y%C3%A1ny%C3%A0o.com/posts/cname-with-yanyao-com/</link><pubDate>Sun, 04 Oct 2015 20:52:56 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/cname-with-yanyao-com/</guid><description>前段时间买了个 idn: yányào.com 闲置了很长时间没动 趁着十一长假无所事事的机会, 把玩了一下 hexo 挂到 yanyaoer.github.io
然后 CNAME 的时候掉坑了, 看到有人说30分钟生效傻傻等就不提了 实际上这个域名的 CNAME 内容应该用编码后的字符串而不是 yányào.com
https://github.com/yanyaoer/yanyaoer.github.io/commit/7c0e4e6863904442d368e3ad5c822f8f189bb7fc#diff-adc4bfdb0829dae99e3699393e3fbaa4
diff --git a/CNAME b/CNAME index 6cb647c..92d166c 100644 --- a/CNAME +++ b/CNAME @@ -1 +1 @@ -yányào.com +xn--ynyo-2nad.com</description></item><item><title>xtag-and-shadowdom</title><link>http://y%C3%A1ny%C3%A0o.com/posts/xtag-and-shadowdom/</link><pubDate>Sun, 04 Oct 2015 12:20:52 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/xtag-and-shadowdom/</guid><description>最近在做的项目重构, 原本打算用 reactjs, 写了一些实验代码后心累无爱 找了个 domdiff 配合自定义标签和 shadowdom 的独有作用域也是爽 YY
可惜的是测试红米上的 android webview 版本(32?)不支持 ::shadow 伪类 inline 方式覆盖样式略嫌繁琐
示例代码 xtag.js let dom = { shadow(el) { return el.createShadowRoot ? el.createShadowRoot() : el.webkitCreateShadowRoot(); }, attr(el, prefix=&amp;#39;&amp;#39;) { return Object.keys(el.dataset).map((d)=&amp;gt; `${prefix}${d}=&amp;#34;${el.dataset[d]}&amp;#34;`).join(&amp;#39; &amp;#39;) } } document.registerElement(&amp;#39;x-image&amp;#39;, { prototype: Object.create(HTMLElement.prototype, { createdCallback: { value() { //xtag 嵌套时这里读不到attr, 放到 attach console.log(&amp;#39;onCreate::image&amp;#39;); } }, attachedCallback: { value() { console.log(&amp;#39;onAttach::image&amp;#39;); let shadow = dom.shadow(this); shadow.innerHTML = `&amp;lt;style&amp;gt; img { max-width: 100%; } &amp;lt;/style&amp;gt; &amp;lt;img ${dom.</description></item><item><title>remote pbcopy with netcat</title><link>http://y%C3%A1ny%C3%A0o.com/posts/remote-pbcopy-with-netcat/</link><pubDate>Tue, 20 Jan 2015 11:45:53 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/remote-pbcopy-with-netcat/</guid><description>Quick start while (true); do nc -l 2224 | pbcopy; done #If your laptop is running linux, replacing pbcopy with xcopy should work: #while (true); do nc -l 2224 | xcopy; done echo &amp;#34;This text gets sent to clipboard&amp;#34; | nc localhost 2224 echo &amp;#34;RemoteForward 2224 localhost:2224&amp;#34; &amp;gt;&amp;gt; ~/.ssh/config ssh remote -t &amp;#39;cat blablabla | nc -q0 localhost 2224&amp;#39; Daemonizing pbcopy launchctl load ~/Library/LaunchAgents/local.pbcopy.plist
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple Computer//DTD PLIST 1.</description></item><item><title>forward email by postfix</title><link>http://y%C3%A1ny%C3%A0o.com/posts/postfix-forward-mail/</link><pubDate>Mon, 06 Oct 2014 01:25:06 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/postfix-forward-mail/</guid><description>sudo aptitude install postfix hostname -f # sudo vim /etc/postfix/main.cf myhostname = example.com myorigin = example.com mydestination = example1.com, example2.com, ... virtual_alias_maps = hash:/etc/postfix/virtual # sudo vim /etc/postfix/virtual @example1.com name@forward.com @example2.com name@forward.com sudo postmap /etc/postfix/virtual sudo /etc/init.d/postfix reload https://wiki.debian.org/Postfix#Forward_Emails
https://www.linode.com/docs/email/postfix/basic-postfix-email-gateway-on-debian-6-squeeze
https://www.debian-administration.org/article/243/Handling_mail_for_multiple_virtual_domains_with_postfix</description></item><item><title>mitmproxy</title><link>http://y%C3%A1ny%C3%A0o.com/posts/mitmproxy/</link><pubDate>Wed, 20 Aug 2014 12:05:38 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/mitmproxy/</guid><description>mitmproxy 是个命令行下查看/修改 http 请求的交互式工具
#截图 #安装
sudo apt-get install python-dev libffi-dev pip install mitmproxy #使用
ubuntu 上启动 mitmproxy
mitmproxy &amp;ndash;host
手机 设置 -&amp;gt; WLAN -&amp;gt; 代理
主机名: ubuntu 的 ip
端口: 8080
然后访问网络就会在 mitmproxy 里看到请求记录(如截图)
#快捷键
j,k 上下移动
enter 进入
tab 切换 request/response
#参考 http://mitmproxy.org/doc/mitmproxy.html
http://blog.philippheckel.com/2013/07/01/how-to-use-mitmproxy-to-read-and-modify-https-traffic-of-your-phone/</description></item><item><title>brick intro</title><link>http://y%C3%A1ny%C3%A0o.com/posts/brick-intro/</link><pubDate>Wed, 28 Aug 2013 10:47:17 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/brick-intro/</guid><description>#Introducing Brick: Minimal-markup Web Components for Faster App Development #介绍 brick: 用于快速开发 webapp 的自定义标签组件
https://hacks.mozilla.org/2013/08/introducing-brick-minimal-markup-web-components-for-faster-app-development/
Those of you on the cutting HTML5 edge may have already heard of the exciting Web Components specification. If you haven’t, you’ll probably want to read up on what makes this so exciting, but long story short, Web Components promise to open up a new realm of development by letting web developers write custom, reusable HTML tags.</description></item><item><title>my osx setup</title><link>http://y%C3%A1ny%C3%A0o.com/posts/my-osx-setup/</link><pubDate>Sun, 09 Jun 2013 12:05:50 +0000</pubDate><guid>http://y%C3%A1ny%C3%A0o.com/posts/my-osx-setup/</guid><description>#setting
# Enable full keyboard access for all controls defaults write NSGlobalDomain AppleKeyboardUIMode -int 3 # Disable menu bar transparency defaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool false # Allow quitting Finder via ⌘ + Q; doing so will also hide desktop icons defaults write com.apple.finder QuitMenuItem -bool true # Avoid creating .DS_Store files on network volumes defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true # Disable the warning when changing a file extension defaults write com.</description></item></channel></rss>